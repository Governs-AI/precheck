Metadata-Version: 2.4
Name: governsai-precheck
Version: 0.0.1
Summary: Policy evaluation and PII redaction service for GovernsAI
Author-email: GovernsAI <team@governs.ai>
Project-URL: Homepage, https://github.com/governsai/precheck
Project-URL: Repository, https://github.com/governsai/precheck
Project-URL: Documentation, https://docs.governs.ai/precheck
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: pydantic>=2.5.0
Requires-Dist: pydantic-settings>=2.1.0
Requires-Dist: presidio-analyzer>=2.2.0
Requires-Dist: presidio-anonymizer>=2.2.0
Requires-Dist: spacy>=3.7.0
Requires-Dist: phonenumbers>=8.13.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: psycopg2-binary>=2.9.0
Requires-Dist: redis>=5.0.0
Requires-Dist: python-multipart>=0.0.6
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: httpx>=0.25.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.7.0; extra == "dev"

# GovernsAI Precheck

Policy evaluation and PII redaction service for GovernsAI. This service provides real-time policy evaluation and PII detection/redaction for AI tool usage.

## Features

- **Policy Evaluation**: Real-time evaluation of AI tool usage against configurable policies
- **PII Detection & Redaction**: Advanced PII detection using Microsoft Presidio with regex fallback
- **API Key Authentication**: Secure API key-based authentication
- **Rate Limiting**: Redis-based rate limiting (optional)
- **Database Storage**: SQLAlchemy-based storage with PostgreSQL/SQLite support
- **Docker Support**: Production-ready Docker containerization

## Quick Start

### Local Development

1. **Install dependencies**:
   ```bash
   pip install -e .
   python -m spacy download en_core_web_sm
   ```

2. **Run the service**:
   ```bash
   uvicorn app.main:app --reload --host 0.0.0.0 --port 8080
   ```

3. **Test the service**:
   ```bash
   curl -X GET http://localhost:8080/v1/health
   ```

### Docker

1. **Build the image**:
   ```bash
   docker build -t governsai-precheck .
   ```

2. **Run the container**:
   ```bash
   docker run -p 8080:8080 governsai-precheck
   ```

## API Endpoints

### Health Check
```http
GET /v1/health
```

Returns service status and version information.

### Precheck
```http
POST /u/{user_id}/v1/precheck
X-Governs-Key: your-api-key
Content-Type: application/json

{
  "tool": "web.fetch",
  "scope": "net.external",
  "payload": {
    "url": "https://example.com",
    "email": "user@example.com"
  },
  "tags": ["research"],
  "corr_id": "req-123"
}
```

**Response**:
```json
{
  "decision": "transform",
  "payload": {
    "url": "https://example.com",
    "email": "u***@example.com"
  },
  "reasons": ["pii.redacted:email"],
  "policy_id": "net-redact-presidio",
  "ts": 1703123456
}
```

### Postcheck
```http
POST /u/{user_id}/v1/postcheck
```

Similar to precheck but for post-execution validation.

## Configuration

The service can be configured via environment variables:

| Variable | Default | Description |
|----------|---------|-------------|
| `APP_BIND` | `0.0.0.0:8080` | Server bind address |
| `DB_URL` | `sqlite:///./local.db` | Database connection URL |
| `REDIS_URL` | `None` | Redis connection URL (optional) |
| `USE_PRESIDIO` | `true` | Enable Presidio PII detection |
| `PRESIDIO_MODEL` | `en_core_web_sm` | spaCy model for Presidio |

## PII Detection

The service uses Microsoft Presidio for advanced PII detection with the following capabilities:

- **Email addresses**: Detected and masked
- **Phone numbers**: International format detection and masking
- **Credit cards**: Luhn algorithm validation and masking
- **API keys**: Custom patterns for various API key formats
- **JWT tokens**: Detection and redaction
- **SSN**: US Social Security Number detection
- **IP addresses**: IPv4/IPv6 detection

### Fallback Mode

If Presidio fails to initialize, the service falls back to regex-based detection for basic PII types (email, phone, credit card).

## Policy Configuration

### Denied Tools
The following tools are automatically denied:
- `python.exec`
- `bash.exec`
- `code.exec`
- `shell.exec`

### Network Tools
Tools with network scope or web/http prefixes trigger PII redaction:
- `web.*`
- `http.*`
- `fetch.*`
- `request.*`
- `net.*` scope

## Development

### Running Tests
```bash
pytest tests/
```

### Code Formatting
```bash
black app/ tests/
isort app/ tests/
```

### Type Checking
```bash
mypy app/
```

## Deployment Modes

### Cloud Mode
- Bind to `0.0.0.0:8080`
- Use PostgreSQL database
- Use Redis for rate limiting
- Set `PUBLIC_BASE` for external access

### Local Sidecar Mode
- Bind to `127.0.0.1:7071`
- Use SQLite database
- Optional Redis
- Local development setup

## License

MIT License - see LICENSE file for details.
